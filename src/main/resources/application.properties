#server.port=8080
#spring.jpa.database=POSTGRESQL
#spring.datasource.platform=postgres
#spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
#spring.datasource.username=postgres
#spring.datasource.password=admin
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=false
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#spring.jackson.serialization.fail-on-empty-beans=false

server.port=7262
spring.datasource.url=postgresql://postgres:rqnmvK4yqh3J8w8Xwtmd@containers-us-west-54.railway.app:7262/railway
spring.jpa.database=railway
spring.datasource.username=postgres
spring.datasource.password=rqnmvK4yqh3J8w8Xwtmd
spring.datasource.platform=postgres
spring.jpa.show-sql=true
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jackson.serialization.fail-on-empty-beans=false

# Habilita que ocorra erro quando envia um json com corpo com propriedades inexistentes ou ignoradas
spring.jackson.deserialization.fail-on-unknown-properties=true
spring.jackson.deserialization.fail-on-ignored-properties=true

spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false

# Se um dia for fazer um certificado para usar https, usar essas configs
#server.ssl.enabled=true
#server.ssl.key-alias=selfsigned_localhost_sslserver
#server.ssl.key-password=changeit
#server.ssl.key-store=classpath:ssl-server.jks
#server.ssl.key-store-provider=SUN
#server.ssl.key-store-type=JKS